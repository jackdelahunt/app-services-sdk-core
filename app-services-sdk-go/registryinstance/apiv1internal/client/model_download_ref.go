/*
 * Service Registry API
 *
 * Service Registry Instance API  NOTE: This API cannot be called directly from the portal.
 *
 * API version: 2.2.5.Final
 * Contact: apicurio@lists.jboss.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package registryinstanceclient

import (
	"encoding/json"
)

// DownloadRef Models a download \"link\".  Useful for browser use-cases.
type DownloadRef struct {
	DownloadId string `json:"downloadId"`
	Href *string `json:"href,omitempty"`
}

// NewDownloadRef instantiates a new DownloadRef object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDownloadRef(downloadId string) *DownloadRef {
	this := DownloadRef{}
	this.DownloadId = downloadId
	return &this
}

// NewDownloadRefWithDefaults instantiates a new DownloadRef object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDownloadRefWithDefaults() *DownloadRef {
	this := DownloadRef{}
	return &this
}

// GetDownloadId returns the DownloadId field value
func (o *DownloadRef) GetDownloadId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DownloadId
}

// GetDownloadIdOk returns a tuple with the DownloadId field value
// and a boolean to check if the value has been set.
func (o *DownloadRef) GetDownloadIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DownloadId, true
}

// SetDownloadId sets field value
func (o *DownloadRef) SetDownloadId(v string) {
	o.DownloadId = v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *DownloadRef) GetHref() string {
	if o == nil || o.Href == nil {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DownloadRef) GetHrefOk() (*string, bool) {
	if o == nil || o.Href == nil {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *DownloadRef) HasHref() bool {
	if o != nil && o.Href != nil {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *DownloadRef) SetHref(v string) {
	o.Href = &v
}

func (o DownloadRef) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["downloadId"] = o.DownloadId
	}
	if o.Href != nil {
		toSerialize["href"] = o.Href
	}
	return json.Marshal(toSerialize)
}

type NullableDownloadRef struct {
	value *DownloadRef
	isSet bool
}

func (v NullableDownloadRef) Get() *DownloadRef {
	return v.value
}

func (v *NullableDownloadRef) Set(val *DownloadRef) {
	v.value = val
	v.isSet = true
}

func (v NullableDownloadRef) IsSet() bool {
	return v.isSet
}

func (v *NullableDownloadRef) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDownloadRef(val *DownloadRef) *NullableDownloadRef {
	return &NullableDownloadRef{value: val, isSet: true}
}

func (v NullableDownloadRef) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDownloadRef) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


