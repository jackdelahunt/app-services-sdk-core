/*
 * Service Registry API
 *
 * Service Registry Instance API  NOTE: This API cannot be called directly from the portal.
 *
 * API version: 2.2.5.Final
 * Contact: apicurio@lists.jboss.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package registryinstanceclient

import (
	"encoding/json"
	"fmt"
)

// RoleType the model 'RoleType'
type RoleType string

// List of RoleType
const (
	ROLETYPE_READ_ONLY RoleType = "READ_ONLY"
	ROLETYPE_DEVELOPER RoleType = "DEVELOPER"
	ROLETYPE_ADMIN RoleType = "ADMIN"
)

var allowedRoleTypeEnumValues = []RoleType{
	"READ_ONLY",
	"DEVELOPER",
	"ADMIN",
}

func (v *RoleType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RoleType(value)
	for _, existing := range allowedRoleTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RoleType", value)
}

// NewRoleTypeFromValue returns a pointer to a valid RoleType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRoleTypeFromValue(v string) (*RoleType, error) {
	ev := RoleType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RoleType: valid values are %v", v, allowedRoleTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RoleType) IsValid() bool {
	for _, existing := range allowedRoleTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RoleType value
func (v RoleType) Ptr() *RoleType {
	return &v
}

type NullableRoleType struct {
	value *RoleType
	isSet bool
}

func (v NullableRoleType) Get() *RoleType {
	return v.value
}

func (v *NullableRoleType) Set(val *RoleType) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleType) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleType(val *RoleType) *NullableRoleType {
	return &NullableRoleType{value: val, isSet: true}
}

func (v NullableRoleType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

