/*
Service Registry API

Service Registry Instance API  NOTE: This API cannot be called directly from the portal.

API version: 2.2.5.Final
Contact: apicurio@lists.jboss.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package registryinstanceclient

import (
	"encoding/json"
)

// VersionSearchResults Describes the response received when searching for artifacts.
type VersionSearchResults struct {
	// The total number of versions that matched the query (may be more than the number of versions returned in the result set).
	Count int32 `json:"count"`
	// The collection of artifact versions returned in the result set.
	Versions []SearchedVersion `json:"versions"`
}

// NewVersionSearchResults instantiates a new VersionSearchResults object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVersionSearchResults(count int32, versions []SearchedVersion) *VersionSearchResults {
	this := VersionSearchResults{}
	this.Count = count
	this.Versions = versions
	return &this
}

// NewVersionSearchResultsWithDefaults instantiates a new VersionSearchResults object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVersionSearchResultsWithDefaults() *VersionSearchResults {
	this := VersionSearchResults{}
	return &this
}

// GetCount returns the Count field value
func (o *VersionSearchResults) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *VersionSearchResults) GetCountOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *VersionSearchResults) SetCount(v int32) {
	o.Count = v
}

// GetVersions returns the Versions field value
func (o *VersionSearchResults) GetVersions() []SearchedVersion {
	if o == nil {
		var ret []SearchedVersion
		return ret
	}

	return o.Versions
}

// GetVersionsOk returns a tuple with the Versions field value
// and a boolean to check if the value has been set.
func (o *VersionSearchResults) GetVersionsOk() ([]SearchedVersion, bool) {
	if o == nil {
    return nil, false
	}
	return o.Versions, true
}

// SetVersions sets field value
func (o *VersionSearchResults) SetVersions(v []SearchedVersion) {
	o.Versions = v
}

func (o VersionSearchResults) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["count"] = o.Count
	}
	if true {
		toSerialize["versions"] = o.Versions
	}
	return json.Marshal(toSerialize)
}

type NullableVersionSearchResults struct {
	value *VersionSearchResults
	isSet bool
}

func (v NullableVersionSearchResults) Get() *VersionSearchResults {
	return v.value
}

func (v *NullableVersionSearchResults) Set(val *VersionSearchResults) {
	v.value = val
	v.isSet = true
}

func (v NullableVersionSearchResults) IsSet() bool {
	return v.isSet
}

func (v *NullableVersionSearchResults) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVersionSearchResults(val *VersionSearchResults) *NullableVersionSearchResults {
	return &NullableVersionSearchResults{value: val, isSet: true}
}

func (v NullableVersionSearchResults) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVersionSearchResults) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


